/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const fs = require("fs");
const bodyparser = require("body-parser");
const zod = require('zod');
const schema = zod.object({
  email: zod.string().email(),
  password: zod.string().min(8 , {'message': "password muts be >=8"})
})
const app = express(); 
app.use(bodyparser.json()); //uses bodyparser middleware  in every request

app.listen(3000, () => {
  console.log("Server Started\n");
});

var countrequests=0;
function count(req,res,next){
  countrequests++;
  console.log("NUMBER OF REQUESTS = " + countrequests);
  next()
}
app.use(count);

//middleware 3 inputs
function authcheck(req,res,next){
if(schema.safeParse(req.headers).success){
if(req.headers.email=="akashbwd@gmail.com" && req.headers.password=="12345678") next();
else {
  res.status(403).json('Invalid username or password');
  // console.log("After res.send"); 
}
}
else {
  res.status(411).json(schema.safeParse(req.headers).error.issues);
}
}



app.get("/", authcheck, (req, res) => {
  res.send("hi");
});

//defining schema for input
const inputtype =zod.array(zod.number());

// POST YOUR TODOs
let Taskarray = [];
let i = 1;
app.post("/", authcheck , (req, res) => {
  // console.log(req.query);
  const data =  req.query.task + "\t\t" + req.query.Description;
  const response=inputtype.safeParse(req.query.task);
  console.log(response); // { success: true, data: 'got school' } { success: false, error: [Getter] }
  Taskarray[i - 1] = data;
  // console.log("Taskarray " + Taskarray[i - 1]);
  if (response.success!=true){
    res.status(411).send(response.error.issues);
  }
  else{
  fs.appendFile(
    "TO-DOs.txt",
    "TASK " + i++ + " " + data + "\n",
    (err, data) => {
      console.log("data added");
      res.status(200);
    }
  );
  res.send("Task added" + response );
}
});

//GET YOUR TODOs
app.get("/gettodos", authcheck , (req, res) => {
    let data = "";
    for (let j = 0; j < Taskarray.length; j++) {
      data += "TASK " + (j + 1) + " " + Taskarray[j] + "\n";
      console.log(data);
    }
    res.send(data);
 } 
);

//global catch 4 inputs
app.use((err,req,res,next)=>{
res.status(500).json({
  " msg " : "something is up with our servers "
})
})