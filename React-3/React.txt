## 
"State" is an object that holds data that can change over the lifetime of a component. 
React tracks this data internally, and when the state changes, it triggers a re-render of the component.
The state is local to the component and can only be updated by that component (although state can be passed down as props to child components).

# Re-rendering in react
It happens when
A state variable that is being used inside a component changes
A parent component re-render triggers all children re-rendering.

# React Memo
Components in React are designed to re-render whenever the state or props value changes. 
Also, when a parent component re-renders, so do all of its child components. This can impact our application performance because, 
even if the change is only intended to affect the parent component, all child components attached to the parent component will be re-rendered. 
Ideally, child components should only re-render if their state or the props passed to them change.

# Warning: Each child in a list should have a unique “key” prop.
Keys tell React which array item each component corresponds to, so that it can match them up later. 
This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. 
A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.
JSX elements directly inside a map() call always need keys!

-  The "useEffect" Hook allows you to perform side effects in your components.
Some examples of side effects are: fetching data, directly updating the DOM, and timers.
useEffect accepts two arguments. The second argument is optional.
useEffect(<function>, <dependency>)

The React "useMemo" Hook returns a memoized value.
The React "useCallback" Hook returns a memoized callback function.
because f1==f1 is false even if both functions are same.



