// ## Node.js Assignments
// In this series of assignments, you are going to create native HTTP servers in Node.js which will handle different kinds of application logics.

// You are provided empty JavaScript files (or having function signatures) in this directory. 
// You have to follow the instructions given in each file and then run automated tests (also mentioned in each file) to check 
// if you have successfully completed the assignment or you still have few more things to learn in it ðŸ˜œ

// ### Assignments
// Recommended order of attempting the assignments.
// 1. Todo List App
// 2. File Server

// #### Important Notes
// 1. If you are unable to understand the request/response of any assignment file or whatever the way it is being tested, you can take a look at its respective test file present in `tests/` directory.
// 2. Don't try to make any changes to the test files present in the `tests/` directory.
// 3. Don't make any changes to the code already present in files including function/method/class signatures and module exports.
// 4. To run individual tests - 
//  - npm run test-fileServer
// npm run test-todoServer

// #### Development Setup
// 1. Install the dependencies used by running `npm install` command in your terminal.
// // 2. We used `18.x.y` Node.js version, if anything doesn't work then please consider upgrading your node installation.
// This week is divided into three parts for assignments - 

// ## Middlewares
//  - You have to create a few standard middlewares for your application.
//  - You have to create a middleware for logging the number of requests on a server
//  - You have to create a middleware for rate limiting a users request based on their username passed in the header
//  - You have to create a middleware for logging the number of errors on a server
//  - To test, go to the 01-middlewares folder and run `npx jest ./tests`
 
// ## JWTs
//  - Write a function that takes in a username and password and returns a JWT token with the username encoded. Should return null if the username is not a valid email or if the password is less than 6 characters. Try using the zod library here
//  - Write a function that takes a jwt as input and returns true if the jwt can be DECODED (not verified). Return false otherwise
//  - Write a function that takes a jwt as input and returns true if the jwt can be VERIFIED. Return false otherewise
//  - To test, go to the 02-jwt folder and run `npx jest ./tests`

// ## Databases